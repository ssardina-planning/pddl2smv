-- Automatically generated by planning2smv

MODULE main
  VAR
    environment : environment_module(agent);
    agent : system_module(environment);
-- end of main 

LTLSPEC
G(F(((environment.holding_A) & (X(environment.on_A_F))) & (G((environment.holding_A) -> (F(environment.holding_B))))))

MODULE system_module(env)

  VAR
    action : {
      start_action,
      pick-up_A,
      pick-up_B,
      pick-up_C,
      pick-up_D,
      pick-up_E,
      pick-up_F,
      put-down_A,
      put-down_B,
      put-down_C,
      put-down_D,
      put-down_E,
      put-down_F,
      stack_A_A,
      stack_A_B,
      stack_A_C,
      stack_A_D,
      stack_A_E,
      stack_A_F,
      stack_B_A,
      stack_B_B,
      stack_B_C,
      stack_B_D,
      stack_B_E,
      stack_B_F,
      stack_C_A,
      stack_C_B,
      stack_C_C,
      stack_C_D,
      stack_C_E,
      stack_C_F,
      stack_D_A,
      stack_D_B,
      stack_D_C,
      stack_D_D,
      stack_D_E,
      stack_D_F,
      stack_E_A,
      stack_E_B,
      stack_E_C,
      stack_E_D,
      stack_E_E,
      stack_E_F,
      stack_F_A,
      stack_F_B,
      stack_F_C,
      stack_F_D,
      stack_F_E,
      stack_F_F,
      unstack_A_A,
      unstack_A_B,
      unstack_A_C,
      unstack_A_D,
      unstack_A_E,
      unstack_A_F,
      unstack_B_A,
      unstack_B_B,
      unstack_B_C,
      unstack_B_D,
      unstack_B_E,
      unstack_B_F,
      unstack_C_A,
      unstack_C_B,
      unstack_C_C,
      unstack_C_D,
      unstack_C_E,
      unstack_C_F,
      unstack_D_A,
      unstack_D_B,
      unstack_D_C,
      unstack_D_D,
      unstack_D_E,
      unstack_D_F,
      unstack_E_A,
      unstack_E_B,
      unstack_E_C,
      unstack_E_D,
      unstack_E_E,
      unstack_E_F,
      unstack_F_A,
      unstack_F_B,
      unstack_F_C,
      unstack_F_D,
      unstack_F_E,
      unstack_F_F
    };

  INIT
    action = start_action

  TRANS
    next(action) != start_action
  INVAR
    -- Action preconditions
      case
        (action = pick-up_A) : (env.handempty & env.clear_A & env.ontable_A);
        (action = pick-up_B) : (env.handempty & env.clear_B & env.ontable_B);
        (action = pick-up_C) : (env.handempty & env.clear_C & env.ontable_C);
        (action = pick-up_D) : (env.handempty & env.clear_D & env.ontable_D);
        (action = pick-up_E) : (env.handempty & env.clear_E & env.ontable_E);
        (action = pick-up_F) : (env.handempty & env.clear_F & env.ontable_F);
        (action = put-down_A) : (env.holding_A);
        (action = put-down_B) : (env.holding_B);
        (action = put-down_C) : (env.holding_C);
        (action = put-down_D) : (env.holding_D);
        (action = put-down_E) : (env.holding_E);
        (action = put-down_F) : (env.holding_F);
        (action = stack_A_A) : (env.holding_A & env.clear_A);
        (action = stack_A_B) : (env.holding_A & env.clear_B);
        (action = stack_A_C) : (env.holding_A & env.clear_C);
        (action = stack_A_D) : (env.holding_A & env.clear_D);
        (action = stack_A_E) : (env.holding_A & env.clear_E);
        (action = stack_A_F) : (env.holding_A & env.clear_F);
        (action = stack_B_A) : (env.holding_B & env.clear_A);
        (action = stack_B_B) : (env.holding_B & env.clear_B);
        (action = stack_B_C) : (env.holding_B & env.clear_C);
        (action = stack_B_D) : (env.holding_B & env.clear_D);
        (action = stack_B_E) : (env.holding_B & env.clear_E);
        (action = stack_B_F) : (env.holding_B & env.clear_F);
        (action = stack_C_A) : (env.holding_C & env.clear_A);
        (action = stack_C_B) : (env.holding_C & env.clear_B);
        (action = stack_C_C) : (env.holding_C & env.clear_C);
        (action = stack_C_D) : (env.holding_C & env.clear_D);
        (action = stack_C_E) : (env.holding_C & env.clear_E);
        (action = stack_C_F) : (env.holding_C & env.clear_F);
        (action = stack_D_A) : (env.holding_D & env.clear_A);
        (action = stack_D_B) : (env.holding_D & env.clear_B);
        (action = stack_D_C) : (env.holding_D & env.clear_C);
        (action = stack_D_D) : (env.holding_D & env.clear_D);
        (action = stack_D_E) : (env.holding_D & env.clear_E);
        (action = stack_D_F) : (env.holding_D & env.clear_F);
        (action = stack_E_A) : (env.holding_E & env.clear_A);
        (action = stack_E_B) : (env.holding_E & env.clear_B);
        (action = stack_E_C) : (env.holding_E & env.clear_C);
        (action = stack_E_D) : (env.holding_E & env.clear_D);
        (action = stack_E_E) : (env.holding_E & env.clear_E);
        (action = stack_E_F) : (env.holding_E & env.clear_F);
        (action = stack_F_A) : (env.holding_F & env.clear_A);
        (action = stack_F_B) : (env.holding_F & env.clear_B);
        (action = stack_F_C) : (env.holding_F & env.clear_C);
        (action = stack_F_D) : (env.holding_F & env.clear_D);
        (action = stack_F_E) : (env.holding_F & env.clear_E);
        (action = stack_F_F) : (env.holding_F & env.clear_F);
        (action = unstack_A_A) : (env.handempty & env.on_A_A & env.clear_A);
        (action = unstack_A_B) : (env.handempty & env.on_A_B & env.clear_A);
        (action = unstack_A_C) : (env.handempty & env.on_A_C & env.clear_A);
        (action = unstack_A_D) : (env.handempty & env.on_A_D & env.clear_A);
        (action = unstack_A_E) : (env.handempty & env.on_A_E & env.clear_A);
        (action = unstack_A_F) : (env.handempty & env.on_A_F & env.clear_A);
        (action = unstack_B_A) : (env.handempty & env.on_B_A & env.clear_B);
        (action = unstack_B_B) : (env.handempty & env.on_B_B & env.clear_B);
        (action = unstack_B_C) : (env.handempty & env.on_B_C & env.clear_B);
        (action = unstack_B_D) : (env.handempty & env.on_B_D & env.clear_B);
        (action = unstack_B_E) : (env.handempty & env.on_B_E & env.clear_B);
        (action = unstack_B_F) : (env.handempty & env.on_B_F & env.clear_B);
        (action = unstack_C_A) : (env.handempty & env.on_C_A & env.clear_C);
        (action = unstack_C_B) : (env.handempty & env.on_C_B & env.clear_C);
        (action = unstack_C_C) : (env.handempty & env.on_C_C & env.clear_C);
        (action = unstack_C_D) : (env.handempty & env.on_C_D & env.clear_C);
        (action = unstack_C_E) : (env.handempty & env.on_C_E & env.clear_C);
        (action = unstack_C_F) : (env.handempty & env.on_C_F & env.clear_C);
        (action = unstack_D_A) : (env.handempty & env.on_D_A & env.clear_D);
        (action = unstack_D_B) : (env.handempty & env.on_D_B & env.clear_D);
        (action = unstack_D_C) : (env.handempty & env.on_D_C & env.clear_D);
        (action = unstack_D_D) : (env.handempty & env.on_D_D & env.clear_D);
        (action = unstack_D_E) : (env.handempty & env.on_D_E & env.clear_D);
        (action = unstack_D_F) : (env.handempty & env.on_D_F & env.clear_D);
        (action = unstack_E_A) : (env.handempty & env.on_E_A & env.clear_E);
        (action = unstack_E_B) : (env.handempty & env.on_E_B & env.clear_E);
        (action = unstack_E_C) : (env.handempty & env.on_E_C & env.clear_E);
        (action = unstack_E_D) : (env.handempty & env.on_E_D & env.clear_E);
        (action = unstack_E_E) : (env.handempty & env.on_E_E & env.clear_E);
        (action = unstack_E_F) : (env.handempty & env.on_E_F & env.clear_E);
        (action = unstack_F_A) : (env.handempty & env.on_F_A & env.clear_F);
        (action = unstack_F_B) : (env.handempty & env.on_F_B & env.clear_F);
        (action = unstack_F_C) : (env.handempty & env.on_F_C & env.clear_F);
        (action = unstack_F_D) : (env.handempty & env.on_F_D & env.clear_F);
        (action = unstack_F_E) : (env.handempty & env.on_F_E & env.clear_F);
        (action = unstack_F_F) : (env.handempty & env.on_F_F & env.clear_F);
        (action = start_action) : TRUE;
      esac
-- end of system_module

MODULE environment_module(sys)

  VAR
    --domain fluents
      on_A_A : boolean;
      on_A_B : boolean;
      on_A_C : boolean;
      on_A_D : boolean;
      on_A_E : boolean;
      on_A_F : boolean;
      on_B_A : boolean;
      on_B_B : boolean;
      on_B_C : boolean;
      on_B_D : boolean;
      on_B_E : boolean;
      on_B_F : boolean;
      on_C_A : boolean;
      on_C_B : boolean;
      on_C_C : boolean;
      on_C_D : boolean;
      on_C_E : boolean;
      on_C_F : boolean;
      on_D_A : boolean;
      on_D_B : boolean;
      on_D_C : boolean;
      on_D_D : boolean;
      on_D_E : boolean;
      on_D_F : boolean;
      on_E_A : boolean;
      on_E_B : boolean;
      on_E_C : boolean;
      on_E_D : boolean;
      on_E_E : boolean;
      on_E_F : boolean;
      on_F_A : boolean;
      on_F_B : boolean;
      on_F_C : boolean;
      on_F_D : boolean;
      on_F_E : boolean;
      on_F_F : boolean;
      ontable_A : boolean;
      ontable_B : boolean;
      ontable_C : boolean;
      ontable_D : boolean;
      ontable_E : boolean;
      ontable_F : boolean;
      clear_A : boolean;
      clear_B : boolean;
      clear_C : boolean;
      clear_D : boolean;
      clear_E : boolean;
      clear_F : boolean;
      handempty : boolean;
      holding_A : boolean;
      holding_B : boolean;
      holding_C : boolean;
      holding_D : boolean;
      holding_E : boolean;
      holding_F : boolean;

  INIT
    -- all predicates initially set to false, they'll be correctly initialized by start_action
      !on_A_A & 
      !on_A_B & 
      !on_A_C & 
      !on_A_D & 
      !on_A_E & 
      !on_A_F & 
      !on_B_A & 
      !on_B_B & 
      !on_B_C & 
      !on_B_D & 
      !on_B_E & 
      !on_B_F & 
      !on_C_A & 
      !on_C_B & 
      !on_C_C & 
      !on_C_D & 
      !on_C_E & 
      !on_C_F & 
      !on_D_A & 
      !on_D_B & 
      !on_D_C & 
      !on_D_D & 
      !on_D_E & 
      !on_D_F & 
      !on_E_A & 
      !on_E_B & 
      !on_E_C & 
      !on_E_D & 
      !on_E_E & 
      !on_E_F & 
      !on_F_A & 
      !on_F_B & 
      !on_F_C & 
      !on_F_D & 
      !on_F_E & 
      !on_F_F & 
      !ontable_A & 
      !ontable_B & 
      !ontable_C & 
      !ontable_D & 
      !ontable_E & 
      !ontable_F & 
      !clear_A & 
      !clear_B & 
      !clear_C & 
      !clear_D & 
      !clear_E & 
      !clear_F & 
      !handempty & 
      !holding_A & 
      !holding_B & 
      !holding_C & 
      !holding_D & 
      !holding_E & 
      !holding_F
  TRANS
    -- block for fluent on_A_A
    case
      sys.action = stack_A_A : next(on_A_A);
      sys.action = unstack_A_A : !next(on_A_A);
      TRUE : next(on_A_A) = on_A_A;
    esac
    &    -- block for fluent on_A_B
    case
      sys.action = stack_A_B : next(on_A_B);
      sys.action = unstack_A_B : !next(on_A_B);
      TRUE : next(on_A_B) = on_A_B;
    esac
    &    -- block for fluent on_A_C
    case
      sys.action = stack_A_C : next(on_A_C);
      sys.action = unstack_A_C : !next(on_A_C);
      TRUE : next(on_A_C) = on_A_C;
    esac
    &    -- block for fluent on_A_D
    case
      sys.action = stack_A_D : next(on_A_D);
      sys.action = unstack_A_D : !next(on_A_D);
      TRUE : next(on_A_D) = on_A_D;
    esac
    &    -- block for fluent on_A_E
    case
      sys.action = stack_A_E : next(on_A_E);
      sys.action = unstack_A_E : !next(on_A_E);
      TRUE : next(on_A_E) = on_A_E;
    esac
    &    -- block for fluent on_A_F
    case
      sys.action = stack_A_F : next(on_A_F);
      sys.action = unstack_A_F : !next(on_A_F);
      TRUE : next(on_A_F) = on_A_F;
    esac
    &    -- block for fluent on_B_A
    case
      sys.action = stack_B_A : next(on_B_A);
      sys.action = unstack_B_A : !next(on_B_A);
      TRUE : next(on_B_A) = on_B_A;
    esac
    &    -- block for fluent on_B_B
    case
      sys.action = stack_B_B : next(on_B_B);
      sys.action = unstack_B_B : !next(on_B_B);
      TRUE : next(on_B_B) = on_B_B;
    esac
    &    -- block for fluent on_B_C
    case
      sys.action = stack_B_C : next(on_B_C);
      sys.action = unstack_B_C : !next(on_B_C);
      TRUE : next(on_B_C) = on_B_C;
    esac
    &    -- block for fluent on_B_D
    case
      sys.action = stack_B_D : next(on_B_D);
      sys.action = unstack_B_D : !next(on_B_D);
      TRUE : next(on_B_D) = on_B_D;
    esac
    &    -- block for fluent on_B_E
    case
      sys.action = stack_B_E : next(on_B_E);
      sys.action = unstack_B_E : !next(on_B_E);
      TRUE : next(on_B_E) = on_B_E;
    esac
    &    -- block for fluent on_B_F
    case
      sys.action = stack_B_F : next(on_B_F);
      sys.action = unstack_B_F : !next(on_B_F);
      TRUE : next(on_B_F) = on_B_F;
    esac
    &    -- block for fluent on_C_A
    case
      sys.action = stack_C_A : next(on_C_A);
      sys.action = unstack_C_A : !next(on_C_A);
      TRUE : next(on_C_A) = on_C_A;
    esac
    &    -- block for fluent on_C_B
    case
      sys.action = stack_C_B : next(on_C_B);
      sys.action = unstack_C_B : !next(on_C_B);
      TRUE : next(on_C_B) = on_C_B;
    esac
    &    -- block for fluent on_C_C
    case
      sys.action = stack_C_C : next(on_C_C);
      sys.action = unstack_C_C : !next(on_C_C);
      TRUE : next(on_C_C) = on_C_C;
    esac
    &    -- block for fluent on_C_D
    case
      sys.action = stack_C_D : next(on_C_D);
      sys.action = unstack_C_D : !next(on_C_D);
      TRUE : next(on_C_D) = on_C_D;
    esac
    &    -- block for fluent on_C_E
    case
      sys.action = stack_C_E : next(on_C_E);
      sys.action = unstack_C_E : !next(on_C_E);
      TRUE : next(on_C_E) = on_C_E;
    esac
    &    -- block for fluent on_C_F
    case
      sys.action = stack_C_F : next(on_C_F);
      sys.action = unstack_C_F : !next(on_C_F);
      TRUE : next(on_C_F) = on_C_F;
    esac
    &    -- block for fluent on_D_A
    case
      sys.action = stack_D_A : next(on_D_A);
      sys.action = unstack_D_A : !next(on_D_A);
      TRUE : next(on_D_A) = on_D_A;
    esac
    &    -- block for fluent on_D_B
    case
      sys.action = stack_D_B : next(on_D_B);
      sys.action = unstack_D_B : !next(on_D_B);
      TRUE : next(on_D_B) = on_D_B;
    esac
    &    -- block for fluent on_D_C
    case
      sys.action = stack_D_C : next(on_D_C);
      sys.action = unstack_D_C : !next(on_D_C);
      TRUE : next(on_D_C) = on_D_C;
    esac
    &    -- block for fluent on_D_D
    case
      sys.action = stack_D_D : next(on_D_D);
      sys.action = unstack_D_D : !next(on_D_D);
      TRUE : next(on_D_D) = on_D_D;
    esac
    &    -- block for fluent on_D_E
    case
      sys.action = stack_D_E : next(on_D_E);
      sys.action = unstack_D_E : !next(on_D_E);
      TRUE : next(on_D_E) = on_D_E;
    esac
    &    -- block for fluent on_D_F
    case
      sys.action = stack_D_F : next(on_D_F);
      sys.action = unstack_D_F : !next(on_D_F);
      TRUE : next(on_D_F) = on_D_F;
    esac
    &    -- block for fluent on_E_A
    case
      sys.action = stack_E_A : next(on_E_A);
      sys.action = unstack_E_A : !next(on_E_A);
      TRUE : next(on_E_A) = on_E_A;
    esac
    &    -- block for fluent on_E_B
    case
      sys.action = stack_E_B : next(on_E_B);
      sys.action = unstack_E_B : !next(on_E_B);
      TRUE : next(on_E_B) = on_E_B;
    esac
    &    -- block for fluent on_E_C
    case
      sys.action = stack_E_C : next(on_E_C);
      sys.action = unstack_E_C : !next(on_E_C);
      TRUE : next(on_E_C) = on_E_C;
    esac
    &    -- block for fluent on_E_D
    case
      sys.action = stack_E_D : next(on_E_D);
      sys.action = unstack_E_D : !next(on_E_D);
      TRUE : next(on_E_D) = on_E_D;
    esac
    &    -- block for fluent on_E_E
    case
      sys.action = stack_E_E : next(on_E_E);
      sys.action = unstack_E_E : !next(on_E_E);
      TRUE : next(on_E_E) = on_E_E;
    esac
    &    -- block for fluent on_E_F
    case
      sys.action = stack_E_F : next(on_E_F);
      sys.action = unstack_E_F : !next(on_E_F);
      TRUE : next(on_E_F) = on_E_F;
    esac
    &    -- block for fluent on_F_A
    case
      sys.action = stack_F_A : next(on_F_A);
      sys.action = unstack_F_A : !next(on_F_A);
      TRUE : next(on_F_A) = on_F_A;
    esac
    &    -- block for fluent on_F_B
    case
      sys.action = stack_F_B : next(on_F_B);
      sys.action = unstack_F_B : !next(on_F_B);
      TRUE : next(on_F_B) = on_F_B;
    esac
    &    -- block for fluent on_F_C
    case
      sys.action = stack_F_C : next(on_F_C);
      sys.action = unstack_F_C : !next(on_F_C);
      TRUE : next(on_F_C) = on_F_C;
    esac
    &    -- block for fluent on_F_D
    case
      sys.action = stack_F_D : next(on_F_D);
      sys.action = unstack_F_D : !next(on_F_D);
      TRUE : next(on_F_D) = on_F_D;
    esac
    &    -- block for fluent on_F_E
    case
      sys.action = stack_F_E : next(on_F_E);
      sys.action = unstack_F_E : !next(on_F_E);
      TRUE : next(on_F_E) = on_F_E;
    esac
    &    -- block for fluent on_F_F
    case
      sys.action = stack_F_F : next(on_F_F);
      sys.action = unstack_F_F : !next(on_F_F);
      TRUE : next(on_F_F) = on_F_F;
    esac
    &    -- block for fluent ontable_A
    case
      sys.action = start_action : next (ontable_A);
      sys.action = pick-up_A : !next(ontable_A);
      sys.action = put-down_A : next(ontable_A);
      TRUE : next(ontable_A) = ontable_A;
    esac
    &    -- block for fluent ontable_B
    case
      sys.action = start_action : next (ontable_B);
      sys.action = pick-up_B : !next(ontable_B);
      sys.action = put-down_B : next(ontable_B);
      TRUE : next(ontable_B) = ontable_B;
    esac
    &    -- block for fluent ontable_C
    case
      sys.action = start_action : next (ontable_C);
      sys.action = pick-up_C : !next(ontable_C);
      sys.action = put-down_C : next(ontable_C);
      TRUE : next(ontable_C) = ontable_C;
    esac
    &    -- block for fluent ontable_D
    case
      sys.action = start_action : next (ontable_D);
      sys.action = pick-up_D : !next(ontable_D);
      sys.action = put-down_D : next(ontable_D);
      TRUE : next(ontable_D) = ontable_D;
    esac
    &    -- block for fluent ontable_E
    case
      sys.action = start_action : next (ontable_E);
      sys.action = pick-up_E : !next(ontable_E);
      sys.action = put-down_E : next(ontable_E);
      TRUE : next(ontable_E) = ontable_E;
    esac
    &    -- block for fluent ontable_F
    case
      sys.action = start_action : next (ontable_F);
      sys.action = pick-up_F : !next(ontable_F);
      sys.action = put-down_F : next(ontable_F);
      TRUE : next(ontable_F) = ontable_F;
    esac
    &    -- block for fluent clear_A
    case
      sys.action = start_action : next (clear_A);
      sys.action = pick-up_A : !next(clear_A);
      sys.action = put-down_A : next(clear_A);
      sys.action = stack_A_A : next(clear_A) & !next(clear_A);
      sys.action = stack_A_B : next(clear_A);
      sys.action = stack_A_C : next(clear_A);
      sys.action = stack_A_D : next(clear_A);
      sys.action = stack_A_E : next(clear_A);
      sys.action = stack_A_F : next(clear_A);
      sys.action = stack_B_A : !next(clear_A);
      sys.action = stack_C_A : !next(clear_A);
      sys.action = stack_D_A : !next(clear_A);
      sys.action = stack_E_A : !next(clear_A);
      sys.action = stack_F_A : !next(clear_A);
      sys.action = unstack_A_A : !next(clear_A) & next(clear_A);
      sys.action = unstack_A_B : !next(clear_A);
      sys.action = unstack_A_C : !next(clear_A);
      sys.action = unstack_A_D : !next(clear_A);
      sys.action = unstack_A_E : !next(clear_A);
      sys.action = unstack_A_F : !next(clear_A);
      sys.action = unstack_B_A : next(clear_A);
      sys.action = unstack_C_A : next(clear_A);
      sys.action = unstack_D_A : next(clear_A);
      sys.action = unstack_E_A : next(clear_A);
      sys.action = unstack_F_A : next(clear_A);
      TRUE : next(clear_A) = clear_A;
    esac
    &    -- block for fluent clear_B
    case
      sys.action = start_action : next (clear_B);
      sys.action = pick-up_B : !next(clear_B);
      sys.action = put-down_B : next(clear_B);
      sys.action = stack_A_B : !next(clear_B);
      sys.action = stack_B_D : next(clear_B);
      sys.action = stack_B_A : next(clear_B);
      sys.action = stack_B_B : next(clear_B) & !next(clear_B);
      sys.action = stack_B_C : next(clear_B);
      sys.action = stack_B_E : next(clear_B);
      sys.action = stack_B_F : next(clear_B);
      sys.action = stack_C_B : !next(clear_B);
      sys.action = stack_D_B : !next(clear_B);
      sys.action = stack_E_B : !next(clear_B);
      sys.action = stack_F_B : !next(clear_B);
      sys.action = unstack_A_B : next(clear_B);
      sys.action = unstack_B_D : !next(clear_B);
      sys.action = unstack_B_A : !next(clear_B);
      sys.action = unstack_B_B : !next(clear_B) & next(clear_B);
      sys.action = unstack_B_C : !next(clear_B);
      sys.action = unstack_B_E : !next(clear_B);
      sys.action = unstack_B_F : !next(clear_B);
      sys.action = unstack_C_B : next(clear_B);
      sys.action = unstack_D_B : next(clear_B);
      sys.action = unstack_E_B : next(clear_B);
      sys.action = unstack_F_B : next(clear_B);
      TRUE : next(clear_B) = clear_B;
    esac
    &    -- block for fluent clear_C
    case
      sys.action = start_action : next (clear_C);
      sys.action = pick-up_C : !next(clear_C);
      sys.action = put-down_C : next(clear_C);
      sys.action = stack_A_C : !next(clear_C);
      sys.action = stack_B_C : !next(clear_C);
      sys.action = stack_C_A : next(clear_C);
      sys.action = stack_C_B : next(clear_C);
      sys.action = stack_C_C : next(clear_C) & !next(clear_C);
      sys.action = stack_C_D : next(clear_C);
      sys.action = stack_C_E : next(clear_C);
      sys.action = stack_C_F : next(clear_C);
      sys.action = stack_D_C : !next(clear_C);
      sys.action = stack_E_C : !next(clear_C);
      sys.action = stack_F_C : !next(clear_C);
      sys.action = unstack_A_C : next(clear_C);
      sys.action = unstack_B_C : next(clear_C);
      sys.action = unstack_C_A : !next(clear_C);
      sys.action = unstack_C_B : !next(clear_C);
      sys.action = unstack_C_C : !next(clear_C) & next(clear_C);
      sys.action = unstack_C_D : !next(clear_C);
      sys.action = unstack_C_E : !next(clear_C);
      sys.action = unstack_C_F : !next(clear_C);
      sys.action = unstack_D_C : next(clear_C);
      sys.action = unstack_E_C : next(clear_C);
      sys.action = unstack_F_C : next(clear_C);
      TRUE : next(clear_C) = clear_C;
    esac
    &    -- block for fluent clear_D
    case
      sys.action = start_action : next (clear_D);
      sys.action = pick-up_D : !next(clear_D);
      sys.action = put-down_D : next(clear_D);
      sys.action = stack_A_D : !next(clear_D);
      sys.action = stack_B_D : !next(clear_D);
      sys.action = stack_C_D : !next(clear_D);
      sys.action = stack_D_A : next(clear_D);
      sys.action = stack_D_B : next(clear_D);
      sys.action = stack_D_C : next(clear_D);
      sys.action = stack_D_D : next(clear_D) & !next(clear_D);
      sys.action = stack_D_E : next(clear_D);
      sys.action = stack_D_F : next(clear_D);
      sys.action = stack_E_D : !next(clear_D);
      sys.action = stack_F_D : !next(clear_D);
      sys.action = unstack_A_D : next(clear_D);
      sys.action = unstack_B_D : next(clear_D);
      sys.action = unstack_C_D : next(clear_D);
      sys.action = unstack_D_A : !next(clear_D);
      sys.action = unstack_D_B : !next(clear_D);
      sys.action = unstack_D_C : !next(clear_D);
      sys.action = unstack_D_D : !next(clear_D) & next(clear_D);
      sys.action = unstack_D_E : !next(clear_D);
      sys.action = unstack_D_F : !next(clear_D);
      sys.action = unstack_E_D : next(clear_D);
      sys.action = unstack_F_D : next(clear_D);
      TRUE : next(clear_D) = clear_D;
    esac
    &    -- block for fluent clear_E
    case
      sys.action = start_action : next (clear_E);
      sys.action = pick-up_E : !next(clear_E);
      sys.action = put-down_E : next(clear_E);
      sys.action = stack_A_E : !next(clear_E);
      sys.action = stack_B_E : !next(clear_E);
      sys.action = stack_C_E : !next(clear_E);
      sys.action = stack_D_E : !next(clear_E);
      sys.action = stack_E_A : next(clear_E);
      sys.action = stack_E_B : next(clear_E);
      sys.action = stack_E_C : next(clear_E);
      sys.action = stack_E_D : next(clear_E);
      sys.action = stack_E_E : next(clear_E) & !next(clear_E);
      sys.action = stack_E_F : next(clear_E);
      sys.action = stack_F_E : !next(clear_E);
      sys.action = unstack_A_E : next(clear_E);
      sys.action = unstack_B_E : next(clear_E);
      sys.action = unstack_C_E : next(clear_E);
      sys.action = unstack_D_E : next(clear_E);
      sys.action = unstack_E_A : !next(clear_E);
      sys.action = unstack_E_B : !next(clear_E);
      sys.action = unstack_E_C : !next(clear_E);
      sys.action = unstack_E_D : !next(clear_E);
      sys.action = unstack_E_E : !next(clear_E) & next(clear_E);
      sys.action = unstack_E_F : !next(clear_E);
      sys.action = unstack_F_E : next(clear_E);
      TRUE : next(clear_E) = clear_E;
    esac
    &    -- block for fluent clear_F
    case
      sys.action = start_action : next (clear_F);
      sys.action = pick-up_F : !next(clear_F);
      sys.action = put-down_F : next(clear_F);
      sys.action = stack_A_F : !next(clear_F);
      sys.action = stack_B_F : !next(clear_F);
      sys.action = stack_C_F : !next(clear_F);
      sys.action = stack_D_F : !next(clear_F);
      sys.action = stack_E_F : !next(clear_F);
      sys.action = stack_F_A : next(clear_F);
      sys.action = stack_F_B : next(clear_F);
      sys.action = stack_F_C : next(clear_F);
      sys.action = stack_F_D : next(clear_F);
      sys.action = stack_F_E : next(clear_F);
      sys.action = stack_F_F : next(clear_F) & !next(clear_F);
      sys.action = unstack_A_F : next(clear_F);
      sys.action = unstack_B_F : next(clear_F);
      sys.action = unstack_C_F : next(clear_F);
      sys.action = unstack_D_F : next(clear_F);
      sys.action = unstack_E_F : next(clear_F);
      sys.action = unstack_F_A : !next(clear_F);
      sys.action = unstack_F_B : !next(clear_F);
      sys.action = unstack_F_C : !next(clear_F);
      sys.action = unstack_F_D : !next(clear_F);
      sys.action = unstack_F_E : !next(clear_F);
      sys.action = unstack_F_F : !next(clear_F) & next(clear_F);
      TRUE : next(clear_F) = clear_F;
    esac
    &    -- block for fluent handempty
    case
      sys.action = start_action : next (handempty);
      sys.action = pick-up_A : !next(handempty);
      sys.action = pick-up_B : !next(handempty);
      sys.action = pick-up_C : !next(handempty);
      sys.action = pick-up_D : !next(handempty);
      sys.action = pick-up_E : !next(handempty);
      sys.action = put-down_A : next(handempty);
      sys.action = pick-up_F : !next(handempty);
      sys.action = put-down_B : next(handempty);
      sys.action = put-down_C : next(handempty);
      sys.action = put-down_D : next(handempty);
      sys.action = put-down_E : next(handempty);
      sys.action = stack_A_A : next(handempty);
      sys.action = put-down_F : next(handempty);
      sys.action = stack_A_B : next(handempty);
      sys.action = stack_A_C : next(handempty);
      sys.action = stack_A_D : next(handempty);
      sys.action = stack_A_E : next(handempty);
      sys.action = stack_B_D : next(handempty);
      sys.action = stack_A_F : next(handempty);
      sys.action = stack_B_A : next(handempty);
      sys.action = stack_B_B : next(handempty);
      sys.action = stack_B_C : next(handempty);
      sys.action = stack_B_E : next(handempty);
      sys.action = stack_B_F : next(handempty);
      sys.action = stack_C_A : next(handempty);
      sys.action = stack_C_B : next(handempty);
      sys.action = stack_C_C : next(handempty);
      sys.action = stack_C_D : next(handempty);
      sys.action = stack_C_E : next(handempty);
      sys.action = stack_C_F : next(handempty);
      sys.action = stack_D_A : next(handempty);
      sys.action = stack_D_B : next(handempty);
      sys.action = stack_D_C : next(handempty);
      sys.action = stack_D_D : next(handempty);
      sys.action = stack_D_E : next(handempty);
      sys.action = stack_D_F : next(handempty);
      sys.action = stack_E_A : next(handempty);
      sys.action = stack_E_B : next(handempty);
      sys.action = stack_E_C : next(handempty);
      sys.action = stack_E_D : next(handempty);
      sys.action = stack_E_E : next(handempty);
      sys.action = stack_E_F : next(handempty);
      sys.action = stack_F_A : next(handempty);
      sys.action = stack_F_B : next(handempty);
      sys.action = stack_F_C : next(handempty);
      sys.action = stack_F_D : next(handempty);
      sys.action = stack_F_E : next(handempty);
      sys.action = stack_F_F : next(handempty);
      sys.action = unstack_A_A : !next(handempty);
      sys.action = unstack_A_B : !next(handempty);
      sys.action = unstack_A_C : !next(handempty);
      sys.action = unstack_A_D : !next(handempty);
      sys.action = unstack_A_E : !next(handempty);
      sys.action = unstack_B_D : !next(handempty);
      sys.action = unstack_A_F : !next(handempty);
      sys.action = unstack_B_A : !next(handempty);
      sys.action = unstack_B_B : !next(handempty);
      sys.action = unstack_B_C : !next(handempty);
      sys.action = unstack_B_E : !next(handempty);
      sys.action = unstack_B_F : !next(handempty);
      sys.action = unstack_C_A : !next(handempty);
      sys.action = unstack_C_B : !next(handempty);
      sys.action = unstack_C_C : !next(handempty);
      sys.action = unstack_C_D : !next(handempty);
      sys.action = unstack_C_E : !next(handempty);
      sys.action = unstack_C_F : !next(handempty);
      sys.action = unstack_D_A : !next(handempty);
      sys.action = unstack_D_B : !next(handempty);
      sys.action = unstack_D_C : !next(handempty);
      sys.action = unstack_D_D : !next(handempty);
      sys.action = unstack_D_E : !next(handempty);
      sys.action = unstack_D_F : !next(handempty);
      sys.action = unstack_E_A : !next(handempty);
      sys.action = unstack_E_B : !next(handempty);
      sys.action = unstack_E_C : !next(handempty);
      sys.action = unstack_E_D : !next(handempty);
      sys.action = unstack_E_E : !next(handempty);
      sys.action = unstack_E_F : !next(handempty);
      sys.action = unstack_F_A : !next(handempty);
      sys.action = unstack_F_B : !next(handempty);
      sys.action = unstack_F_C : !next(handempty);
      sys.action = unstack_F_D : !next(handempty);
      sys.action = unstack_F_E : !next(handempty);
      sys.action = unstack_F_F : !next(handempty);
      TRUE : next(handempty) = handempty;
    esac
    &    -- block for fluent holding_A
    case
      sys.action = pick-up_A : next(holding_A);
      sys.action = put-down_A : !next(holding_A);
      sys.action = stack_A_A : !next(holding_A);
      sys.action = stack_A_B : !next(holding_A);
      sys.action = stack_A_C : !next(holding_A);
      sys.action = stack_A_D : !next(holding_A);
      sys.action = stack_A_E : !next(holding_A);
      sys.action = stack_A_F : !next(holding_A);
      sys.action = unstack_A_A : next(holding_A);
      sys.action = unstack_A_B : next(holding_A);
      sys.action = unstack_A_C : next(holding_A);
      sys.action = unstack_A_D : next(holding_A);
      sys.action = unstack_A_E : next(holding_A);
      sys.action = unstack_A_F : next(holding_A);
      TRUE : next(holding_A) = holding_A;
    esac
    &    -- block for fluent holding_B
    case
      sys.action = pick-up_B : next(holding_B);
      sys.action = put-down_B : !next(holding_B);
      sys.action = stack_B_D : !next(holding_B);
      sys.action = stack_B_A : !next(holding_B);
      sys.action = stack_B_B : !next(holding_B);
      sys.action = stack_B_C : !next(holding_B);
      sys.action = stack_B_E : !next(holding_B);
      sys.action = stack_B_F : !next(holding_B);
      sys.action = unstack_B_D : next(holding_B);
      sys.action = unstack_B_A : next(holding_B);
      sys.action = unstack_B_B : next(holding_B);
      sys.action = unstack_B_C : next(holding_B);
      sys.action = unstack_B_E : next(holding_B);
      sys.action = unstack_B_F : next(holding_B);
      TRUE : next(holding_B) = holding_B;
    esac
    &    -- block for fluent holding_C
    case
      sys.action = pick-up_C : next(holding_C);
      sys.action = put-down_C : !next(holding_C);
      sys.action = stack_C_A : !next(holding_C);
      sys.action = stack_C_B : !next(holding_C);
      sys.action = stack_C_C : !next(holding_C);
      sys.action = stack_C_D : !next(holding_C);
      sys.action = stack_C_E : !next(holding_C);
      sys.action = stack_C_F : !next(holding_C);
      sys.action = unstack_C_A : next(holding_C);
      sys.action = unstack_C_B : next(holding_C);
      sys.action = unstack_C_C : next(holding_C);
      sys.action = unstack_C_D : next(holding_C);
      sys.action = unstack_C_E : next(holding_C);
      sys.action = unstack_C_F : next(holding_C);
      TRUE : next(holding_C) = holding_C;
    esac
    &    -- block for fluent holding_D
    case
      sys.action = pick-up_D : next(holding_D);
      sys.action = put-down_D : !next(holding_D);
      sys.action = stack_D_A : !next(holding_D);
      sys.action = stack_D_B : !next(holding_D);
      sys.action = stack_D_C : !next(holding_D);
      sys.action = stack_D_D : !next(holding_D);
      sys.action = stack_D_E : !next(holding_D);
      sys.action = stack_D_F : !next(holding_D);
      sys.action = unstack_D_A : next(holding_D);
      sys.action = unstack_D_B : next(holding_D);
      sys.action = unstack_D_C : next(holding_D);
      sys.action = unstack_D_D : next(holding_D);
      sys.action = unstack_D_E : next(holding_D);
      sys.action = unstack_D_F : next(holding_D);
      TRUE : next(holding_D) = holding_D;
    esac
    &    -- block for fluent holding_E
    case
      sys.action = pick-up_E : next(holding_E);
      sys.action = put-down_E : !next(holding_E);
      sys.action = stack_E_A : !next(holding_E);
      sys.action = stack_E_B : !next(holding_E);
      sys.action = stack_E_C : !next(holding_E);
      sys.action = stack_E_D : !next(holding_E);
      sys.action = stack_E_E : !next(holding_E);
      sys.action = stack_E_F : !next(holding_E);
      sys.action = unstack_E_A : next(holding_E);
      sys.action = unstack_E_B : next(holding_E);
      sys.action = unstack_E_C : next(holding_E);
      sys.action = unstack_E_D : next(holding_E);
      sys.action = unstack_E_E : next(holding_E);
      sys.action = unstack_E_F : next(holding_E);
      TRUE : next(holding_E) = holding_E;
    esac
    &    -- block for fluent holding_F
    case
      sys.action = pick-up_F : next(holding_F);
      sys.action = put-down_F : !next(holding_F);
      sys.action = stack_F_A : !next(holding_F);
      sys.action = stack_F_B : !next(holding_F);
      sys.action = stack_F_C : !next(holding_F);
      sys.action = stack_F_D : !next(holding_F);
      sys.action = stack_F_E : !next(holding_F);
      sys.action = stack_F_F : !next(holding_F);
      sys.action = unstack_F_A : next(holding_F);
      sys.action = unstack_F_B : next(holding_F);
      sys.action = unstack_F_C : next(holding_F);
      sys.action = unstack_F_D : next(holding_F);
      sys.action = unstack_F_E : next(holding_F);
      sys.action = unstack_F_F : next(holding_F);
      TRUE : next(holding_F) = holding_F;
    esac
-- end of environment_module

